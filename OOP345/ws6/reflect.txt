//Name: Alon Raigorodetsky
//User ID: 109763201
//Date: 07/11/2021
//email: araigorodetsky@myseneca.ca


//I have done all the coding by myself and -only copied the code that my professor provided to complete my workshops and assignments.


1)

Every container class defines a destructor. This includes the vector 
container. Therefore, when an Autoshop object goes out of scope, the vector 
object’s destructor is called. During the destruction of the vector, all 
statically allocated members of the class are deallocated automatically (
including elements of the sequence). However, if the container was managing 
elements of raw pointer type where each element pointed to a resource, the 
pointers themselves will be automatically deallocated (as they are 
statically allocated) but the pointer’s associated resource would not be 
deallocated. The reason the resource is not deallocated is because raw 
pointers (as well as the other built-in types) do not define a destructor 
that will automatically deallocate the resource. In other words it will 
destruct the elements only if they have automatic storage duration.


2)

In this workshop the createInstance() function, as well as the 
constructor code, threw an exception on the occurrence of an error. The 
client is responsible for reading the error message and taking the 
appropriate action. In this workshop, the client, regardless of the error 
that occurred while reading the file the action was to simply ignore the 
rest of the data in the record.

A possible solution could be having createInstance() return nullptr on failure. The 
exceptions generated by the constructor as well as the createInstance() 
function itself can be handled internally by the function itself. To 
determine the exact error that occurred, the Car module’s implementation 
file can define a variable of integral type that holds a value that will be 
used to indicate the error that occurred during the last performed operation 
on an object within the Vehicle hierarchy. The Vechicle module can define 
symbolic constants representing what the value of the error number will be 
if that error were to occur. The client can access the value of the error 
number with an external linkage declaration and take appropriate 
action based on its value after calling createInstance(). 

3)

No. Template type which was used for the containers could not been sdds::Vehicle.
due to the vehicle class being an abstract base class which cannot be instantiated. Because of that
it would be impossible to add elements into the container since the elements would not be able to be 
constructed in the first place. Also if sdds::Vehicle class was a concreate class it still would not had
worked because storing values of that class will not allow dynamic dispatch to occur.
